buildscript {
    ext {
        kotlin_version = '1.2.30'
        kotlin_json_version = '1.2.1'
        kotlinx_coroutines_version = '0.22.3'
        kotlinx_html_version = '0.6.9'
        ktor_version = '0.9.2-alpha-2'
        shadow_version = '2.0.1'
        jda_version = '3.5.0_338'
        jda_utilities_version = '2.1'
        lavaplayer_version = '1.2.49'
        //hocon_version = '3.3'
        hocon_version = '1.3.1'
        jsoup_version = '1.10.2'
        youtube_api_version = 'v3-rev189-1.23.0'
        ok_http_version = "3.8.1"
        h2_version = '1.4.196'
        slf4j_version = '1.7.25'
        logback_version = '1.2.3'
        jagtag_version = '0.5'
        junit_version = '1.0.1'
        jupiter_version = '5.1.0'
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadow_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_version"
    }
}

def ver = new Version(major: 0, minor: 1)

allprojects {
    group 'xyz.laxus'
    version "$ver"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'kotlin'
    apply plugin: 'com.github.johnrengelman.shadow'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ext {
        repositories {
            jitpack = {
                maven {
                    url 'https://jitpack.io/'
                }
            }
        }

        dependencies {
            kotlinModule = { String module -> "org.jetbrains.kotlin:kotlin-$module:$kotlin_version" }
            kotlinxModule = { String module, String version -> "org.jetbrains.kotlinx:kotlinx-$module:$version" }
            kotlinxCoroutines = { String module -> kotlinxModule("coroutines-$module", kotlinx_coroutines_version) }
            kotlinxHtml = { String module = "jvm" -> kotlinxModule("html-$module", kotlinx_html_version) }
            kotlinJson = { "me.kgustave:kotlin-json-core:$kotlin_json_version" }
            ktorModule = { String module -> "io.ktor:ktor-$module:$ktor_version" }
            ktorServer = { String module = "core" -> ktorModule("server-$module") }

            jda = { "net.dv8tion:JDA:$jda_version" }
            jdaUtilities = { String module ->
                "com.github.JDA-Applications.JDA-Utilities:jda-utilities-$module:feature~oauth2-SNAPSHOT"
            }

            //hocon = { "ninja.leaping.configurate:configurate-hocon:$hocon_version" }
            lavaplayer = { "com.sedmelluq:lavaplayer:$lavaplayer_version" }
            hocon = { "com.typesafe:config:$hocon_version" }
            youtube = { "com.google.apis:google-api-services-youtube:$youtube_api_version" }
            okHttp = { "com.squareup.okhttp3:okhttp:$ok_http_version" }
            jsoup = { "org.jsoup:jsoup:$jsoup_version" }
            h2 = { "com.h2database:h2:$h2_version" }
            slf4j = { "org.slf4j:slf4j-api:$slf4j_version" }
            logback = { "ch.qos.logback:logback-classic:$logback_version" }
            jagtag = { "com.jagrosh:JagTag:$jagtag_version" }
            jupiter = { String module -> "org.junit.jupiter:junit-jupiter-$module:$jupiter_version" }
        }
    }

    sourceSets {
        test {
            kotlin.srcDirs += 'src/test/kotlin'

            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        compileOnly kotlinModule("stdlib-jdk8")
        compileOnly kotlinModule("stdlib-jdk7")

        testCompile kotlinModule("test-junit")
        testCompile kotlinModule("reflect")
        testCompile slf4j()
        testCompile logback()
        testCompile jupiter("api")
        testRuntime jupiter("engine")
    }

    kotlin {
        experimental {
            coroutines = 'ENABLE'
        }
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

class Version {
    String major, minor

    @Override
    String toString() {
        "${major}.${minor}"
    }
}