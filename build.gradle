/*
 * Copyright 2018 Kaidan Gustave
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.gradle.plugins.ide.idea.model.IdeaLanguageLevel
import org.jetbrains.kotlin.gradle.tasks.*

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
    }

    dependencies {
        //noinspection DifferentKotlinGradleVersion
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
        classpath "org.jetbrains.kotlinx:atomicfu-gradle-plugin:$atomicfuVersion"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadowJarVersion"
    }
}

def versionInfo = [minor: 1, major: 0, patch: 0]

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'kotlin'

    // Apply Extensions Script
    apply from: rootProject.file('gradle/extensions.gradle')

    group 'xyz.laxus'
    version versionInfo.values().join('.')

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://kotlin.bintray.com/ktor' }
        maven { url 'https://kotlin.bintray.com/kotlinx' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url 'https://dl.bintray.com/spekframework/spek-dev' }
    }

    dependencies {
        compile kotlinLibrary('stdlib')
        compile kotlinLibrary('stdlib-jdk7')
        compile kotlinLibrary('stdlib-jdk8')

        testCompile kotlinLibrary('test-junit5')
        testCompile junitJupiter('api')
        testCompile spek('dsl-jvm')
        testRuntime junitJupiter('engine')
        testRuntime spek('runner-junit5')
    }

    //noinspection GroovyAssignabilityCheck,GrUnresolvedAccess
    tasks.withType(KotlinCompile).all {
        kotlinOptions {
            jvmTarget = '1.8'
            apiVersion = '1.3'
            freeCompilerArgs = ['-Xuse-experimental=kotlin.contracts.ExperimentalContracts']
        }
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter', 'spek2'
        }

        // add a system property 'env.mode'
        //to signal that this is a test run.
        systemProperty 'env.mode', 'test'

        filter {
            failOnNoMatchingTests false
            includeTestsMatching '.*Tests'
            includeTestsMatching '.*Spek'
        }

        testLogging {
            // output logging to console
            showStandardStreams true
            events 'PASSED', 'SKIPPED', 'FAILED'
        }

        beforeTest { descriptor -> logger.info("Running test: $descriptor") }
    }

    def moduleName = project == rootProject ? 'app' : "${project.path.replace('-', '.').replace(':', '.')}"

    jar {
        manifest {
            attributes(
                'Manifest-Version': "${versionInfo.major}.${versionInfo.minor}",
                'Implementation-Version': "$version",
                'Kotlin-Version': kotlinVersion,
                'Automatic-Module-Name': "laxus.$moduleName"
            )
        }
    }

    build {
        dependsOn clean
        dependsOn classes
        dependsOn jar

        classes.mustRunAfter clean
        jar.mustRunAfter classes
    }
}

subprojects {
    sourceSets {
        main {
            java.srcDir 'main/java'
            kotlin.srcDir 'main/kotlin'
            resources.srcDir 'main/resources'
        }

        test {
            java.srcDir 'test/java'
            kotlin.srcDir 'test/kotlin'
            resources.srcDir 'test/resources'
        }
    }
}

apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

mainClassName = 'xyz.laxus.Main'

dependencies {
    compile project(':bot')
    compile project(':commons')
    compile project(':config')
    compile project(':coroutines')
    compile project(':database')
    compile project(':logging')
    compile project(':reflect')
    compile project(':utils')
    
    testCompile junitJupiter('params')
    testCompile project(':testing')
}

shadowJar {
    baseName 'laxus'
    version ''
    classifier ''

    manifest {
        attributes 'Manifest-Version': "${versionInfo.major}.${versionInfo.minor}",
                   'Main-Class': mainClassName
    }
}

idea {
    project {
        jdkName sourceCompatibility.isJava8Compatible() ? '1.8' : '9'
        languageLevel new IdeaLanguageLevel(jdkName)
    }
}

wrapper {
    gradleVersion '4.9'
}
