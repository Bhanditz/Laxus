buildscript {
    ext {
        kotlin_version = '1.2.31'
        kotlin_json_version = '1.2.1'
        kotlinx_coroutines_version = '0.22.3'
        kotlinx_html_version = '0.6.9'
        ktor_version = '0.9.2-alpha-2'
        shadow_version = '2.0.1'
        jda_version = '3.6.0_354'
        jda_utilities_version = 'feature~oauth2-SNAPSHOT'
        lavaplayer_version = '1.2.49'
        hocon_version = '1.3.1'
        jsoup_version = '1.10.2'
        youtube_api_version = 'v3-rev189-1.23.0'
        ok_http_version = "3.8.1"
        h2_version = '1.4.196'
        slf4j_version = '1.7.25'
        logback_version = '1.2.3'
        jagtag_version = '0.5'
        junit_version = '1.0.1'
        jupiter_version = '5.1.0'
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadow_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_version"
    }
}

def ver = [major: 0, minor: 2]

allprojects {
    group = 'xyz.laxus'
    version = ver.values().join('.')

    ext.ver = ver
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'kotlin'

    sourceCompatibility = 9
    targetCompatibility = 9

    ext {
        repositories {
            jitpack = {
                maven {
                    url = 'https://jitpack.io/'
                }
            }
        }

        dependencies {
            // Kotlin
            kotlinModule = { String module -> "org.jetbrains.kotlin:kotlin-$module:$kotlin_version" }
            kotlinxModule = { String module, String version -> "org.jetbrains.kotlinx:kotlinx-$module:$version" }

            // Kotlin Coroutines
            kotlinxCoroutines = { String module -> kotlinxModule("coroutines-$module", kotlinx_coroutines_version) }

            // Kotlin Html
            kotlinxHtml = { String module = "jvm" -> kotlinxModule("html-$module", kotlinx_html_version) }

            // Kotlin Json
            kotlinJson = { "me.kgustave:kotlin-json-core:$kotlin_json_version" }

            // JDA
            jda = { "net.dv8tion:JDA:$jda_version" }
            jdaUtilities = { String module -> "com.github.JDA-Applications.JDA-Utilities:jda-utilities-$module:$jda_utilities_version" }

            // Lavaplayer
            lavaplayer = { "com.sedmelluq:lavaplayer:$lavaplayer_version" }

            // Database
            h2 = { "com.h2database:h2:$h2_version" }

            // Configuration
            hocon = { "com.typesafe:config:$hocon_version" }

            // Requests
            youtube = { "com.google.apis:google-api-services-youtube:$youtube_api_version" }
            okHttp = { "com.squareup.okhttp3:okhttp:$ok_http_version" }
            jsoup = { "org.jsoup:jsoup:$jsoup_version" }

            // Logging
            slf4j = { "org.slf4j:slf4j-api:$slf4j_version" }
            logback = { "ch.qos.logback:logback-classic:$logback_version" }

            // Misc
            jagtag = { "com.jagrosh:JagTag:$jagtag_version" }

            // JUnit (test)
            jupiter = { String module -> "org.junit.jupiter:junit-jupiter-$module:$jupiter_version" }
        }
    }

    sourceSets {
        test {
            kotlin.srcDirs += 'src/test/kotlin'

            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        compileOnly kotlinModule('stdlib')
        compileOnly kotlinModule("stdlib-jdk8")
        compileOnly kotlinModule("stdlib-jdk7")

        testCompile kotlinModule("test-junit")
        testCompile kotlinModule("reflect")
        testCompile slf4j()
        testCompile logback()
        testCompile jupiter("api")
        testRuntime jupiter("engine")
    }

    kotlin {
        experimental {
            coroutines = 'ENABLE'
        }
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    jar {
        manifest {
            attributes 'Manifest-Version': "${ver.major}.${ver.minor}",
                       'Implementation-Version': "$version",
                       'Automatic-Module-Name': "laxus${project.path.replace('-', '.').replace(':', '.')}"
        }
    }

    build {
        dependsOn classes
        dependsOn jar

        jar.mustRunAfter classes
    }

    task rebuild {
        group = 'build'
        description = 'Cleans build directory before running normal build task'

        dependsOn clean
        dependsOn build

        build.mustRunAfter clean
    }
}

wrapper {
    gradleVersion = '4.6'
}